{"version":3,"file":"index.cjs","sources":["../src/util/config.ts","../src/util/s3-client.ts","../src/util/helpers.ts","../src/nextjs/s3-presigned-api.ts","../src/nextjs/components/FileUploadInput.tsx","../src/nextjs/file-upload-hook.ts","../src/client.ts"],"sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\n\nexport type TS3Config = {\n  accessKeyId: string;\n  secretAccessKey: string;\n  bucket: string;\n  region: string;\n};\n\nexport type TGetConfigParams = {\n  accessKeyId: string | undefined;\n  secretAccessKey: string | undefined;\n  bucket: string | undefined;\n  region: string | undefined;\n};\n\nfunction validateParams(params: TGetConfigParams) {\n  const { accessKeyId, secretAccessKey, bucket, region } = params;\n\n  if (!accessKeyId) {\n    throw new Error(\"Missing AWS_ACCESS_KEY_ID environment variable\");\n  }\n\n  if (!secretAccessKey) {\n    throw new Error(\"Missing AWS_SECRET_ACCESS_KEY environment variable\");\n  }\n  if (!bucket) {\n    console.warn(\n      \"\\x1b[41m\\x1b[31m%s\\x1b[0m\",\n      \"Missing BUCKET_NAME environment variable\"\n    );\n  }\n\n  if (!region) {\n    console.warn(\n      \"\\x1b[41m\\x1b[31m%s\\x1b[0m\",\n      \"Missing AWS_REGION environment variable\"\n    );\n  }\n}\n\nexport function getConfig(params: TGetConfigParams): TS3Config {\n  validateParams(params);\n\n  const { accessKeyId, secretAccessKey, bucket, region } = params;\n\n  // If bucket or region are not defined, we use a default value\n  const _DEFAULT_BUCKET_NAME = `--undefined-bucket-name-${uuidv4()}`;\n  const _DEFAULT_REGION = \"us-east-1\";\n\n  const config: TS3Config = {\n    accessKeyId: `${accessKeyId}`,\n    secretAccessKey: `${secretAccessKey}`,\n    region: `${region || _DEFAULT_REGION}`,\n    bucket: `${bucket || _DEFAULT_BUCKET_NAME}`,\n  };\n\n  return config;\n}\n","import { S3Client } from \"@aws-sdk/client-s3\";\nimport { TS3Config, getConfig } from \"./config\";\n\nexport function getS3Client(config: TS3Config) {\n  let client = new S3Client({\n    credentials: {\n      accessKeyId: config.accessKeyId,\n      secretAccessKey: config.secretAccessKey,\n    },\n    region: config.region,\n  });\n\n  return client;\n}\n\nexport const getS3ClientNative = () => {\n  // this version of the function gets the config from the environment variables\n  const params = {\n    accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n    region: process.env.AWS_REGION,\n    bucket: process.env.S3_BUCKET_NAME,\n  };\n\n  let config = getConfig(params);\n\n  return getS3Client(config);\n};\n","export function validateStringInput(input: string | string[]): string {\n  // convert string of arrays or string to string / used in apiSignS3Url\n  if (!input) {\n    throw new Error(\"Input cannot be empty\");\n  } else if (Array.isArray(input)) {\n    return input.join(\",\");\n  } else {\n    return input;\n  }\n}\n","import { PutObjectCommand } from \"@aws-sdk/client-s3\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { getS3ClientNative } from \"../util\";\nimport { validateStringInput } from \"../util/helpers\";\n\ninterface S3UploadResponse {\n  signed_url: string;\n  params: any;\n  command: any;\n}\n\nexport async function apiSignS3Url(\n  filename: string | string[],\n  filetype: string | string[]\n): Promise<S3UploadResponse> {\n  const client = getS3ClientNative();\n  filename = validateStringInput(filename);\n  filetype = validateStringInput(filetype);\n\n  const objectKey = `${filename}-${Date.now()}`;\n  const params = {\n    Bucket: process.env.S3_BUCKET_NAME,\n    Key: objectKey,\n    ContentType: filetype,\n    CacheControl: \"max-age=630720000\",\n    Metadata: {\n      metadata1: \"value12\",\n      metadata2: \"value2\",\n    },\n  };\n\n  const command = new PutObjectCommand(params);\n  const signed_url = await getSignedUrl(client, command, { expiresIn: 3600 });\n\n  return { signed_url, params, command };\n}\n","import React from \"react\";\n\nexport function FileUploadInput({ handleUpload }: { handleUpload: any }) {\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n    const file = e.target.files?.[0]!;\n    if (!file) {\n      return alert(\"No file selected.\");\n    } else {\n      handleUpload(file);\n    }\n  };\n\n  return (\n    <input\n      type=\"file\"\n      accept=\"image/png, image/jpeg\"\n      onChange={handleFileChange}\n    />\n  );\n}\n","import axios from \"axios\";\nimport { FileUploadInput } from \"./components/FileUploadInput\";\n\nfunction validateS3SignedUrl(url: string) {\n  const regex = new RegExp(/^(ftp|http|https):\\/\\/[^ \"]+$/);\n\n  if (!regex.test(url)) {\n    throw new Error(\"[UploadSection/uploadFile] Invalid URL\");\n  }\n}\n\nexport async function fetchPresignedUrl(\n  filename: string,\n  filetype: string\n): Promise<string> {\n  const res = await fetch(\n    `/api/upload-presigned?filename=${filename}&filetype=${encodeURIComponent(\n      filetype\n    )}`\n  );\n  const signed_url = (await res.json()).signed_url;\n  validateS3SignedUrl(signed_url);\n  return signed_url;\n}\n\nexport async function uploadFile(file: File): Promise<any> {\n  if (!file) {\n    throw new Error(\"[UploadSection/uploadFile] NO FILE\");\n  }\n\n  const signed_url = await fetchPresignedUrl(\n    file.name || \"unknown-front-end-filename\",\n    file.type\n  );\n\n  try {\n    const upload_response = await axios.put(signed_url, file);\n    return upload_response;\n  } catch (err) {\n    console.error({ err });\n    return err;\n  }\n}\n\nexport const useFileUpload = () => ({\n  FileUploadInput,\n  uploadFile,\n});\n","export * from \"./util/s3-client\";\nexport * from \"./util/config\";\nexport * from \"./nextjs/s3-presigned-api\";\nexport * from \"./nextjs/file-upload-hook\";\n\n// for testing purposes should be removed at some point\nexport function demo(a: number, b: number): number {\n  console.log(\"The package is correctly compiled and distributed!\");\n  return a + b;\n}\n"],"names":["uuidv4","S3Client","PutObjectCommand","getSignedUrl"],"mappings":"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"}